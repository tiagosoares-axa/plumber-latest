source_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(source_path)
source("sub_process.R")
# result3 <- paste0(ls(),collapse="_")
# result2 <- "empty"
# return(paste0("sourcevars:",result2,"_outvars:",result3))
result3 <- new_function(ainp,a)
return(result3)
}
##########################################################
#             Publish Model as a Service                 #
##########################################################
# Generate a unique serviceName for demos
# and assign to variable serviceName
serviceName <- paste0("Test_",round(runif(1)*1000))
serviceName
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "character"),
v = "v1.0.0"
)
print(deleteService(serviceName, "v1.0.0"))
test_read_nested <- function() {
# return("rrrrrr")
return(as.character(tryCatch({library(HDtsweedie)},error = function(x) x)))
a="str"
b="str"
c="str"
d="str"
ainp <- as.character(ainp)
result <- paste0(ainp,"_",b,"_",c,"_",d)
# return(result)
source_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(source_path)
source("sub_process.R")
# result3 <- paste0(ls(),collapse="_")
# result2 <- "empty"
# return(paste0("sourcevars:",result2,"_outvars:",result3))
result3 <- new_function(ainp,a)
return(result3)
}
##########################################################
#             Publish Model as a Service                 #
##########################################################
# Generate a unique serviceName for demos
# and assign to variable serviceName
serviceName <- paste0("Test_",round(runif(1)*1000))
serviceName
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "character"),
v = "v1.0.0"
)
print(deleteService(serviceName, "v1.0.0"))
test_read_nested <- function()
{
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
#### Data Prep
model_data <- api_input_data_prep(veh_grp_path = veh_grp_path)
#### Knots etc
model_data <- enrichment_data_prep(model_path = model_path,
model_data = model_data)
riskcost_prediction <- predict_riskcost(model_path = model_path,
model_data = model_data)
propensity_prediction <- predict_propensity(model_data_propensity = model_data,
propensity_model_location = propensity_model_location)
return(c(riskcost_prediction,
propensity_prediction$delta_nonpremiumvars,
propensity_prediction$delta_premiumvars))
}
##########################################################
#             Publish Model as a Service                 #
##########################################################
# Generate a unique serviceName for demos
# and assign to variable serviceName
serviceName <- paste0("Test_",round(runif(1)*1000))
serviceName
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "character"),
v = "v1.0.0"
)
print(deleteService(serviceName, "v1.0.0"))
test_read_nested <- function()
{
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
#### Data Prep
model_data <- api_input_data_prep(veh_grp_path = veh_grp_path)
#### Knots etc
model_data <- enrichment_data_prep(model_path = model_path,
model_data = model_data)
riskcost_prediction <- predict_riskcost(model_path = model_path,
model_data = model_data)
propensity_prediction <- predict_propensity(model_data_propensity = model_data,
propensity_model_location = propensity_model_location)
return(c(riskcost_prediction,
propensity_prediction$delta_nonpremiumvars,
propensity_prediction$delta_premiumvars))
}
##########################################################
#             Publish Model as a Service                 #
##########################################################
# Generate a unique serviceName for demos
# and assign to variable serviceName
serviceName <- paste0("Test_",round(runif(1)*1000))
serviceName
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "character"),
v = "v1.0.0"
)
print(deleteService(serviceName, "v1.0.0"))
test_read_nested <- function()
{
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
#### Data Prep
model_data <- api_input_data_prep(veh_grp_path = veh_grp_path)
#### Knots etc
model_data <- enrichment_data_prep(model_path = model_path,
model_data = model_data)
riskcost_prediction <- predict_riskcost(model_path = model_path,
model_data = model_data)
propensity_prediction <- predict_propensity(model_data_propensity = model_data,
propensity_model_location = propensity_model_location)
return(c(riskcost_prediction,
propensity_prediction$delta_nonpremiumvars,
propensity_prediction$delta_premiumvars))
}
##########################################################
#             Publish Model as a Service                 #
##########################################################
# Generate a unique serviceName for demos
# and assign to variable serviceName
serviceName <- paste0("Test_",round(runif(1)*1000))
serviceName
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "character"),
v = "v1.0.0"
)
print(deleteService(serviceName, "v1.0.0"))
test_read_nested <- function()
{
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
return("OK")
#### Data Prep
model_data <- api_input_data_prep(veh_grp_path = veh_grp_path)
#### Knots etc
model_data <- enrichment_data_prep(model_path = model_path,
model_data = model_data)
riskcost_prediction <- predict_riskcost(model_path = model_path,
model_data = model_data)
propensity_prediction <- predict_propensity(model_data_propensity = model_data,
propensity_model_location = propensity_model_location)
return(c(riskcost_prediction,
propensity_prediction$delta_nonpremiumvars,
propensity_prediction$delta_premiumvars))
}
##########################################################
#             Publish Model as a Service                 #
##########################################################
# Generate a unique serviceName for demos
# and assign to variable serviceName
serviceName <- paste0("Test_",round(runif(1)*1000))
serviceName
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "character"),
v = "v1.0.0"
)
print(deleteService(serviceName, "v1.0.0"))
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
library(XML)
library(RJSONIO)
xml_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls/Resources/XMLs/00AD57270F1AF4DF11CEAC6A96F76213.xml"
xml_in <- XML::xmlParse(xml_path)
xml_list <- xmlToList(xml_in)
xml_single_inputs_df <- data.frame(name = make.unique(names(unlist(xml_list))), value = unlist(xml_list))
# send inputs to environment to simulate server reading
for (i in 1:nrow(xml_single_inputs_df))
{
assign(as.character(xml_single_inputs_df$name[i]),as.character(xml_single_inputs_df$value[i]))
}
peril = "F"
m_type = "Severity"
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
model_data <- api_input_data_prep(veh_grp_path = veh_grp_path)
model_data
model_data$VEH_veh_age_clean
test_read_nested <- function()
{
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
# return("OK")
#### Data Prep
model_data <- api_input_data_prep(veh_grp_path = veh_grp_path)
return(as.character(model_data$VEH_veh_age_clean))
#### Knots etc
model_data <- enrichment_data_prep(model_path = model_path,
model_data = model_data)
riskcost_prediction <- predict_riskcost(model_path = model_path,
model_data = model_data)
propensity_prediction <- predict_propensity(model_data_propensity = model_data,
propensity_model_location = propensity_model_location)
return(c(riskcost_prediction,
propensity_prediction$delta_nonpremiumvars,
propensity_prediction$delta_premiumvars))
}
##########################################################
#             Publish Model as a Service                 #
##########################################################
# Generate a unique serviceName for demos
# and assign to variable serviceName
serviceName <- paste0("Test_",round(runif(1)*1000))
serviceName
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "character"),
v = "v1.0.0"
)
veh_grp_path
print(deleteService(serviceName, "v1.0.0"))
test_read_nested <- function()
{
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
# return("OK")
#### Data Prep
return(PolData.Vehicle.Vehicle_DateManufactured.Val)
model_data <- api_input_data_prep(veh_grp_path = veh_grp_path)
return(as.character(model_data$VEH_veh_age_clean))
#### Knots etc
model_data <- enrichment_data_prep(model_path = model_path,
model_data = model_data)
riskcost_prediction <- predict_riskcost(model_path = model_path,
model_data = model_data)
propensity_prediction <- predict_propensity(model_data_propensity = model_data,
propensity_model_location = propensity_model_location)
return(c(riskcost_prediction,
propensity_prediction$delta_nonpremiumvars,
propensity_prediction$delta_premiumvars))
}
##########################################################
#             Publish Model as a Service                 #
##########################################################
# Generate a unique serviceName for demos
# and assign to variable serviceName
serviceName <- paste0("Test_",round(runif(1)*1000))
serviceName
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "character"),
v = "v1.0.0"
)
print(deleteService(serviceName, "v1.0.0"))
test_read_nested <- function()
{
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
# return("OK")
#### Data Prep
# return(PolData.Vehicle.Vehicle_DateManufactured.Val)
model_data <- api_input_data_prep(veh_grp_path = veh_grp_path)
# return(as.character(model_data$VEH_veh_age_clean))
#### Knots etc
model_data <- enrichment_data_prep(model_path = model_path,
model_data = model_data)
riskcost_prediction <- predict_riskcost(model_path = model_path,
model_data = model_data)
propensity_prediction <- predict_propensity(model_data_propensity = model_data,
propensity_model_location = propensity_model_location)
return(c(riskcost_prediction,
propensity_prediction$delta_nonpremiumvars,
propensity_prediction$delta_premiumvars))
}
##########################################################
#             Publish Model as a Service                 #
##########################################################
# Generate a unique serviceName for demos
# and assign to variable serviceName
serviceName <- paste0("Test_",round(runif(1)*1000))
serviceName
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "character"),
v = "v1.0.0"
)
print(deleteService(serviceName, "v1.0.0"))
test_read_nested <- function()
{
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
# return("OK")
#### Data Prep
# return(PolData.Vehicle.Vehicle_DateManufactured.Val)
model_data <- api_input_data_prep(veh_grp_path = veh_grp_path)
# return(as.character(model_data$VEH_veh_age_clean))
#### Knots etc
model_data <- enrichment_data_prep(model_path = model_path,
model_data = model_data)
riskcost_prediction <- predict_riskcost(model_path = model_path,
model_data = model_data)
propensity_prediction <- predict_propensity(model_data_propensity = model_data,
propensity_model_location = propensity_model_location)
return(c(riskcost_prediction,
propensity_prediction$delta_nonpremiumvars,
propensity_prediction$delta_premiumvars))
}
##########################################################
#             Publish Model as a Service                 #
##########################################################
# Generate a unique serviceName for demos
# and assign to variable serviceName
serviceName <- paste0("Test_",round(runif(1)*1000))
serviceName
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "vector"),
v = "v1.0.0"
)
print(deleteService(serviceName, "v1.0.0"))
test_read_nested <- function()
{
library(HDtweedie)
library(glmnet)
parent_path <- "D:/PricingDeployment/POC_step3/Pumber_xmls"
setwd(parent_path)
#### Fixed path locations
riskcost_model_location = 'Resources/Risk_Models/'
propensity_model_location = 'Resources/Propensity_Models/CV_propensity.RDS'
veh_grp_path = 'Resources/veh_grp_lookup.csv'
model_path <-  file.path(riskcost_model_location, peril, m_type, "CV.RDS")
for (i in list.files("Functions/",full.names = T)) source(i)
# return("OK")
#### Data Prep
# return(PolData.Vehicle.Vehicle_DateManufactured.Val)
model_data <- api_input_data_prep(veh_grp_path = veh_grp_path)
# return(as.character(model_data$VEH_veh_age_clean))
#### Knots etc
model_data <- enrichment_data_prep(model_path = model_path,
model_data = model_data)
riskcost_prediction <- predict_riskcost(model_path = model_path,
model_data = model_data)
propensity_prediction <- predict_propensity(model_data_propensity = model_data,
propensity_model_location = propensity_model_location)
return(c(riskcost_prediction,
propensity_prediction$delta_nonpremiumvars,
propensity_prediction$delta_premiumvars))
}
serviceName <- "mock_call_with_calculation"
# Publish as service using publishService() function from
# mrsdeploy package. Name service "mtService" and provide
# unique version number. Assign service to the variable `api`
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "vector"),
v = "v1.0.0"
)
test_read_nested <- function() {
return(c(1,2,3))
}
serviceName
serviceName <- "mock_call_without_calculation"
api <- publishService(
serviceName,
code = test_read_nested,
# inputs = list(list(a="character",list(b="character",c="character",d="character"))),
outputs = list(answer = "vector"),
v = "v1.0.0"
)
api <- getService("mock_call_with_calculation", "v1.0.0")
getwd()
swagger <- api$swagger()
cat(swagger, file = "T:/ACTUARIAL/Transfer Data/Joao Gabriel/Microsoft ML Server/mock_call_with_calculation/mock_call_with_calculation_swagger.json", append = FALSE)
